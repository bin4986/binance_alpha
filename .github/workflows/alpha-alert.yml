name: Alpha Alert

on:
  workflow_dispatch:            # Actions 탭에서 수동 실행
  # push:
  #   branches: [ main ]        # 원하면 푸시 때도 실행되게 주석 해제

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies (minimum)
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # (선택) 텔레그램 API로 바로 한 번 쏴보는 검증 단계
      - name: Sanity send via curl
        env:
          TELEGRAM_TOKEN_RAW: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID_RAW: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          set -e
          TOKEN="$(printf "%s" "$TELEGRAM_TOKEN_RAW" | tr -d '\r\n ' )"
          CHAT_ID="$(printf "%s" "$TELEGRAM_CHAT_ID_RAW" | tr -d '\r\n ' )"
          MSG="✅ Sanity OK ($(date -u '+%Y-%m-%d %H:%M:%S UTC'))"
          RESP=$(curl -s -X POST "https://api.telegram.org/bot${TOKEN}/sendMessage" \
                 -d "chat_id=${CHAT_ID}" --data-urlencode "text=${MSG}")
          echo "::notice title=Telegram API response (curl)::${RESP}"
          echo "$RESP" | grep -q '"ok":true' || (echo "Telegram send failed"; exit 1)

      - name: Run monitor once (python)
        env:
          TELEGRAM_BOT_TOKEN_RAW: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID_RAW:  ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          # 개행/공백 제거 후 표준 키로 export
          export TELEGRAM_BOT_TOKEN="$(printf "%s" "$TELEGRAM_BOT_TOKEN_RAW" | tr -d '\r\n ' )"
          export TELEGRAM_CHAT_ID="$(printf "%s" "$TELEGRAM_CHAT_ID_RAW" | tr -d '\r\n ' )"

          echo "TOKEN length: ${#TELEGRAM_BOT_TOKEN}, CHAT_ID length: ${#TELEGRAM_CHAT_ID}"
          python alpha_alert.py
